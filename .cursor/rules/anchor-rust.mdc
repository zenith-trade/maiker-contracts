---
description: Anchor Rust Files
globs: *.rs
alwaysApply: false
---
Write all code like Anchor 0.28.0. Do not use unnecessary macros that are not needed in Anchor 0.28.0.

Create files inside the `state` folder for whatever state is needed.
1. Use the #[account] attribute
2. Use the #[derive(InitSpace)] attribute
3. Have a pub bump: u8 field
4. Have an impl block with
    a. a SEED_PREFIX constant that defines a kebab-case string for PDA derivation
    b. a get_pda_signer function that takes input "self" and returns the Signer Seed for that given account

Create files inside the `instructions` folder for whatever instruction handlers are needed. Put Account Constraints here, but ensure the names end with `AccountConstraints` rather than just naming them the same thing as the function. Handlers that are only for the admin should be in a new folder called `admin` inside the `instructions` folder.

Use a newline after each key in the account constraints, so the macro and the matching key/value have some space from other macros and their matching key/value.

Use `context` rather than `ctx`. Avoid abbreviations, and use full words. Never use `e` for something thrown. In TypeScript, use `catch (thrownObject)` and then `const error = thrownObject as Error;` - you can assume any item thrown is an Error.

Delete unused constants, unused instruction handlers and comments that no longer apply.

Use `context.bumps.foo` not `context.bumps.get("foo").unwrap()` - the latter is outdated.

When making structs ensure strings and Vectors have a max_len attribute. Vectors have two numbers, the first is the max length of the vector, the second is the max length of the items in the vector.

Use the INIT_SPACE macro for all structs stored onchain. Make a constant for ANCHOR_DISCRIMINATOR that is a usize of 8. Do not use magic numbers. I don't want to see `8 + 32` or whatever. Do NOT use magic numbers. Do not make constants for the sizes of various data structures, you can use INIT_SPACE for this.

Use `anchor_lang::solana_program::clock` to get the current time where needed.

Return useful error messages. Write code to handle common errors like insufficient funds, bad values for parameters, and other obvious situations.

When you get the time via Clock, use `Clock::get()?;` and do not use the Clock sysvar account.

About Mathematical operations:
- NEVER use regular arithmetic operators (+, -, , /, %) directly
- Always use checked arithmetic methods to prevent overflow/underflow errors

When validating accounts, use consistent patterns:
- For owner checks, use `constraint = account.owner == expected_owner.key()`
- For equality checks, use `constraint = account.key() == expected_key`
- Group related constraints together with comments explaining their purpose

Create specific error variants in your error enum rather than using generic errors:
- Each error should describe a specific failure condition
- Error messages should be actionable for users/developers
- Use error codes that are easily searchable in logs (e.g., 6000-6999 range)

Create Anchor Events in src/events.rs instead of in the instruction files
