/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { isProgramError, type Address, type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, type SolanaError } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';


  /** ArithmeticOverflow: Arithmetic overflow */
  export const MAIKER_CONTRACTS_ERROR__ARITHMETIC_OVERFLOW = 0x1770, // 6000
  /** NotAuthorized: Not authorized to perform this action */
  export const MAIKER_CONTRACTS_ERROR__NOT_AUTHORIZED = 0x1771, // 6001
  /** InvalidFee: Invalid fee (performance fee max 30%, withdrawal fee max 5%) */
  export const MAIKER_CONTRACTS_ERROR__INVALID_FEE = 0x1772, // 6002
  /** NoShares: No shares in strategy */
  export const MAIKER_CONTRACTS_ERROR__NO_SHARES = 0x1773, // 6003
  /** InvalidWithdrawalAmount: Invalid withdrawal amount */
  export const MAIKER_CONTRACTS_ERROR__INVALID_WITHDRAWAL_AMOUNT = 0x1774, // 6004
  /** NoFeesToWithdraw: No fees to withdraw */
  export const MAIKER_CONTRACTS_ERROR__NO_FEES_TO_WITHDRAW = 0x1775, // 6005
  /** MaxPositionsReached: Max positions reached */
  export const MAIKER_CONTRACTS_ERROR__MAX_POSITIONS_REACHED = 0x1776, // 6006
  /** InvalidPosition: Invalid position */
  export const MAIKER_CONTRACTS_ERROR__INVALID_POSITION = 0x1777, // 6007
  /** InvalidBinId: Invalid bin id */
  export const MAIKER_CONTRACTS_ERROR__INVALID_BIN_ID = 0x1778, // 6008
  /** InvalidDepositAmount: Invalid deposit amount */
  export const MAIKER_CONTRACTS_ERROR__INVALID_DEPOSIT_AMOUNT = 0x1779, // 6009
  /** StalePositionValue: Position value is stale and must be updated in the current slot */
  export const MAIKER_CONTRACTS_ERROR__STALE_POSITION_VALUE = 0x177a, // 6010
  /** InvalidWithdrawalInterval: Invalid withdrawal interval (minimum 5 minutes) */
  export const MAIKER_CONTRACTS_ERROR__INVALID_WITHDRAWAL_INTERVAL = 0x177b, // 6011
  /** WithdrawalNotReady: Withdrawal is not ready yet */
  export const MAIKER_CONTRACTS_ERROR__WITHDRAWAL_NOT_READY = 0x177c, // 6012
  /** PositionNotFound: Position not found */
  export const MAIKER_CONTRACTS_ERROR__POSITION_NOT_FOUND = 0x177d, // 6013
  /** InvalidSwap: Invalid swap instruction */
  export const MAIKER_CONTRACTS_ERROR__INVALID_SWAP = 0x177e, // 6014
  /** NonZeroTransferFee: Non-zero transfer fee */
  export const MAIKER_CONTRACTS_ERROR__NON_ZERO_TRANSFER_FEE = 0x177f, // 6015
  /** InvalidMetadataParam: Invalid metadata parameter: name, symbol, or uri is empty or too long */
  export const MAIKER_CONTRACTS_ERROR__INVALID_METADATA_PARAM = 0x1780, // 6016

export type MaikerContractsError =
      | typeof MAIKER_CONTRACTS_ERROR__ARITHMETIC_OVERFLOW
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_BIN_ID
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_DEPOSIT_AMOUNT
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_FEE
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_METADATA_PARAM
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_POSITION
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_SWAP
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_WITHDRAWAL_AMOUNT
      | typeof MAIKER_CONTRACTS_ERROR__INVALID_WITHDRAWAL_INTERVAL
      | typeof MAIKER_CONTRACTS_ERROR__MAX_POSITIONS_REACHED
      | typeof MAIKER_CONTRACTS_ERROR__NO_FEES_TO_WITHDRAW
      | typeof MAIKER_CONTRACTS_ERROR__NON_ZERO_TRANSFER_FEE
      | typeof MAIKER_CONTRACTS_ERROR__NO_SHARES
      | typeof MAIKER_CONTRACTS_ERROR__NOT_AUTHORIZED
      | typeof MAIKER_CONTRACTS_ERROR__POSITION_NOT_FOUND
      | typeof MAIKER_CONTRACTS_ERROR__STALE_POSITION_VALUE
      | typeof MAIKER_CONTRACTS_ERROR__WITHDRAWAL_NOT_READY
  ;

let maikerContractsErrorMessages: Record<MaikerContractsError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  maikerContractsErrorMessages = {
          [MAIKER_CONTRACTS_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
          [MAIKER_CONTRACTS_ERROR__INVALID_BIN_ID]: `Invalid bin id`,
          [MAIKER_CONTRACTS_ERROR__INVALID_DEPOSIT_AMOUNT]: `Invalid deposit amount`,
          [MAIKER_CONTRACTS_ERROR__INVALID_FEE]: `Invalid fee (performance fee max 30%, withdrawal fee max 5%)`,
          [MAIKER_CONTRACTS_ERROR__INVALID_METADATA_PARAM]: `Invalid metadata parameter: name, symbol, or uri is empty or too long`,
          [MAIKER_CONTRACTS_ERROR__INVALID_POSITION]: `Invalid position`,
          [MAIKER_CONTRACTS_ERROR__INVALID_SWAP]: `Invalid swap instruction`,
          [MAIKER_CONTRACTS_ERROR__INVALID_WITHDRAWAL_AMOUNT]: `Invalid withdrawal amount`,
          [MAIKER_CONTRACTS_ERROR__INVALID_WITHDRAWAL_INTERVAL]: `Invalid withdrawal interval (minimum 5 minutes)`,
          [MAIKER_CONTRACTS_ERROR__MAX_POSITIONS_REACHED]: `Max positions reached`,
          [MAIKER_CONTRACTS_ERROR__NO_FEES_TO_WITHDRAW]: `No fees to withdraw`,
          [MAIKER_CONTRACTS_ERROR__NON_ZERO_TRANSFER_FEE]: `Non-zero transfer fee`,
          [MAIKER_CONTRACTS_ERROR__NO_SHARES]: `No shares in strategy`,
          [MAIKER_CONTRACTS_ERROR__NOT_AUTHORIZED]: `Not authorized to perform this action`,
          [MAIKER_CONTRACTS_ERROR__POSITION_NOT_FOUND]: `Position not found`,
          [MAIKER_CONTRACTS_ERROR__STALE_POSITION_VALUE]: `Position value is stale and must be updated in the current slot`,
          [MAIKER_CONTRACTS_ERROR__WITHDRAWAL_NOT_READY]: `Withdrawal is not ready yet`,
      };
}

export function getMaikerContractsErrorMessage(code: MaikerContractsError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (maikerContractsErrorMessages as Record<MaikerContractsError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isMaikerContractsError<TProgramErrorCode extends MaikerContractsError>(
    error: unknown,
    transactionMessage: { instructions: Record<number, { programAddress: Address }> },
    code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> & Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(error, transactionMessage, MAIKER_CONTRACTS_PROGRAM_ADDRESS, code);
}

