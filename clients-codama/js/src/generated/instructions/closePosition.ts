/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_POSITION_DISCRIMINATOR = new Uint8Array([123, 134, 81, 0, 49, 68, 98, 98]);

export function getClosePositionDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_POSITION_DISCRIMINATOR); }

export type ClosePositionInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAuthority extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountLbPair extends string | IAccountMeta<string> = string, TAccountBinArrayLower extends string | IAccountMeta<string> = string, TAccountBinArrayUpper extends string | IAccountMeta<string> = string, TAccountRentReceiver extends string | IAccountMeta<string> = string, TAccountLbClmmProgram extends string | IAccountMeta<string> = string, TAccountEventAuthority extends string | IAccountMeta<string> = string, TAccountPositionOwner extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition, TAccountLbPair extends string ? WritableAccount<TAccountLbPair> : TAccountLbPair, TAccountBinArrayLower extends string ? WritableAccount<TAccountBinArrayLower> : TAccountBinArrayLower, TAccountBinArrayUpper extends string ? WritableAccount<TAccountBinArrayUpper> : TAccountBinArrayUpper, TAccountRentReceiver extends string ? WritableAccount<TAccountRentReceiver> : TAccountRentReceiver, TAccountLbClmmProgram extends string ? ReadonlyAccount<TAccountLbClmmProgram> : TAccountLbClmmProgram, TAccountEventAuthority extends string ? ReadonlyAccount<TAccountEventAuthority> : TAccountEventAuthority, TAccountPositionOwner extends string ? WritableAccount<TAccountPositionOwner> : TAccountPositionOwner, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, ...TRemainingAccounts]>
  ;



export type ClosePositionInstructionData = { discriminator: ReadonlyUint8Array;  };

export type ClosePositionInstructionDataArgs = {  };




export function getClosePositionInstructionDataEncoder(): Encoder<ClosePositionInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({ ...value, discriminator: CLOSE_POSITION_DISCRIMINATOR }));
}



export function getClosePositionInstructionDataDecoder(): Decoder<ClosePositionInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)]]);
}




export function getClosePositionInstructionDataCodec(): Codec<ClosePositionInstructionDataArgs, ClosePositionInstructionData> {
  return combineCodec(getClosePositionInstructionDataEncoder(), getClosePositionInstructionDataDecoder());
}




export type ClosePositionInput<TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountStrategy extends string = string,
  TAccountPosition extends string = string,
  TAccountLbPair extends string = string,
  TAccountBinArrayLower extends string = string,
  TAccountBinArrayUpper extends string = string,
  TAccountRentReceiver extends string = string,
  TAccountLbClmmProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountPositionOwner extends string = string,
  TAccountTokenProgram extends string = string,
  >
=  {
  authority: TransactionSigner<TAccountAuthority>;
globalConfig: Address<TAccountGlobalConfig>;
strategy: Address<TAccountStrategy>;
position: Address<TAccountPosition>;
lbPair: Address<TAccountLbPair>;
binArrayLower: Address<TAccountBinArrayLower>;
binArrayUpper: Address<TAccountBinArrayUpper>;
rentReceiver: Address<TAccountRentReceiver>;
/** The lb_clmm program */
lbClmmProgram: Address<TAccountLbClmmProgram>;
eventAuthority: Address<TAccountEventAuthority>;
positionOwner: Address<TAccountPositionOwner>;
tokenProgram?: Address<TAccountTokenProgram>;
}


export  function getClosePositionInstruction<TAccountAuthority extends string, TAccountGlobalConfig extends string, TAccountStrategy extends string, TAccountPosition extends string, TAccountLbPair extends string, TAccountBinArrayLower extends string, TAccountBinArrayUpper extends string, TAccountRentReceiver extends string, TAccountLbClmmProgram extends string, TAccountEventAuthority extends string, TAccountPositionOwner extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: ClosePositionInput<TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountPosition, TAccountLbPair, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountRentReceiver, TAccountLbClmmProgram, TAccountEventAuthority, TAccountPositionOwner, TAccountTokenProgram>, config?: { programAddress?: TProgramAddress } ): ClosePositionInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountPosition, TAccountLbPair, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountRentReceiver, TAccountLbClmmProgram, TAccountEventAuthority, TAccountPositionOwner, TAccountTokenProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              authority: { value: input.authority ?? null, isWritable: false },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              strategy: { value: input.strategy ?? null, isWritable: true },
              position: { value: input.position ?? null, isWritable: true },
              lbPair: { value: input.lbPair ?? null, isWritable: true },
              binArrayLower: { value: input.binArrayLower ?? null, isWritable: true },
              binArrayUpper: { value: input.binArrayUpper ?? null, isWritable: true },
              rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
              lbClmmProgram: { value: input.lbClmmProgram ?? null, isWritable: false },
              eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
              positionOwner: { value: input.positionOwner ?? null, isWritable: true },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.position),
                  getAccountMeta(accounts.lbPair),
                  getAccountMeta(accounts.binArrayLower),
                  getAccountMeta(accounts.binArrayUpper),
                  getAccountMeta(accounts.rentReceiver),
                  getAccountMeta(accounts.lbClmmProgram),
                  getAccountMeta(accounts.eventAuthority),
                  getAccountMeta(accounts.positionOwner),
                  getAccountMeta(accounts.tokenProgram),
                      ]      ,    programAddress,
          data: getClosePositionInstructionDataEncoder().encode({}),
      } as ClosePositionInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountPosition, TAccountLbPair, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountRentReceiver, TAccountLbClmmProgram, TAccountEventAuthority, TAccountPositionOwner, TAccountTokenProgram>;

      return instruction;
  }


export type ParsedClosePositionInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      authority: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      strategy: TAccountMetas[2],
                      position: TAccountMetas[3],
                      lbPair: TAccountMetas[4],
                      binArrayLower: TAccountMetas[5],
                      binArrayUpper: TAccountMetas[6],
                      rentReceiver: TAccountMetas[7],
                        /** The lb_clmm program */
                lbClmmProgram: TAccountMetas[8],
                      eventAuthority: TAccountMetas[9],
                      positionOwner: TAccountMetas[10],
                      tokenProgram: TAccountMetas[11],
          };
        data: ClosePositionInstructionData;
  };

export function parseClosePositionInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedClosePositionInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 12) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              authority: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        strategy: getNextAccount(),
                                        position: getNextAccount(),
                                        lbPair: getNextAccount(),
                                        binArrayLower: getNextAccount(),
                                        binArrayUpper: getNextAccount(),
                                        rentReceiver: getNextAccount(),
                                        lbClmmProgram: getNextAccount(),
                                        eventAuthority: getNextAccount(),
                                        positionOwner: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                        },
              data: getClosePositionInstructionDataDecoder().decode(instruction.data),
      };
}

