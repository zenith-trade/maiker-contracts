/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getOptionDecoder, getOptionEncoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_FEES_DISCRIMINATOR = new Uint8Array([82, 251, 233, 156, 12, 52, 184, 202]);

export function getClaimFeesDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_FEES_DISCRIMINATOR); }

export type ClaimFeesInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAuthority extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountStrategyVaultX extends string | IAccountMeta<string> = string, TAccountTreasuryX extends string | IAccountMeta<string> = string, TAccountMTokenMint extends string | IAccountMeta<string> = string, TAccountStrategyMTokenAta extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountStrategyVaultX extends string ? WritableAccount<TAccountStrategyVaultX> : TAccountStrategyVaultX, TAccountTreasuryX extends string ? WritableAccount<TAccountTreasuryX> : TAccountTreasuryX, TAccountMTokenMint extends string ? WritableAccount<TAccountMTokenMint> : TAccountMTokenMint, TAccountStrategyMTokenAta extends string ? WritableAccount<TAccountStrategyMTokenAta> : TAccountStrategyMTokenAta, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, ...TRemainingAccounts]>
  ;



export type ClaimFeesInstructionData = { discriminator: ReadonlyUint8Array; sharesToClaim: Option<bigint>;  };

export type ClaimFeesInstructionDataArgs = { sharesToClaim: OptionOrNullable<number | bigint>;  };




export function getClaimFeesInstructionDataEncoder(): Encoder<ClaimFeesInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['sharesToClaim', getOptionEncoder(getU64Encoder())]]), (value) => ({ ...value, discriminator: CLAIM_FEES_DISCRIMINATOR }));
}



export function getClaimFeesInstructionDataDecoder(): Decoder<ClaimFeesInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['sharesToClaim', getOptionDecoder(getU64Decoder())]]);
}




export function getClaimFeesInstructionDataCodec(): Codec<ClaimFeesInstructionDataArgs, ClaimFeesInstructionData> {
  return combineCodec(getClaimFeesInstructionDataEncoder(), getClaimFeesInstructionDataDecoder());
}




export type ClaimFeesInput<TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountStrategy extends string = string,
  TAccountStrategyVaultX extends string = string,
  TAccountTreasuryX extends string = string,
  TAccountMTokenMint extends string = string,
  TAccountStrategyMTokenAta extends string = string,
  TAccountTokenProgram extends string = string,
  >
=  {
  authority: TransactionSigner<TAccountAuthority>;
globalConfig: Address<TAccountGlobalConfig>;
strategy: Address<TAccountStrategy>;
strategyVaultX: Address<TAccountStrategyVaultX>;
treasuryX: Address<TAccountTreasuryX>;
mTokenMint: Address<TAccountMTokenMint>;
strategyMTokenAta: Address<TAccountStrategyMTokenAta>;
tokenProgram?: Address<TAccountTokenProgram>;sharesToClaim: ClaimFeesInstructionDataArgs["sharesToClaim"];
}


export  function getClaimFeesInstruction<TAccountAuthority extends string, TAccountGlobalConfig extends string, TAccountStrategy extends string, TAccountStrategyVaultX extends string, TAccountTreasuryX extends string, TAccountMTokenMint extends string, TAccountStrategyMTokenAta extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: ClaimFeesInput<TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountStrategyVaultX, TAccountTreasuryX, TAccountMTokenMint, TAccountStrategyMTokenAta, TAccountTokenProgram>, config?: { programAddress?: TProgramAddress } ): ClaimFeesInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountStrategyVaultX, TAccountTreasuryX, TAccountMTokenMint, TAccountStrategyMTokenAta, TAccountTokenProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              authority: { value: input.authority ?? null, isWritable: false },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              strategy: { value: input.strategy ?? null, isWritable: true },
              strategyVaultX: { value: input.strategyVaultX ?? null, isWritable: true },
              treasuryX: { value: input.treasuryX ?? null, isWritable: true },
              mTokenMint: { value: input.mTokenMint ?? null, isWritable: true },
              strategyMTokenAta: { value: input.strategyMTokenAta ?? null, isWritable: true },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.strategyVaultX),
                  getAccountMeta(accounts.treasuryX),
                  getAccountMeta(accounts.mTokenMint),
                  getAccountMeta(accounts.strategyMTokenAta),
                  getAccountMeta(accounts.tokenProgram),
                      ]      ,    programAddress,
          data: getClaimFeesInstructionDataEncoder().encode(args as ClaimFeesInstructionDataArgs),
      } as ClaimFeesInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountStrategyVaultX, TAccountTreasuryX, TAccountMTokenMint, TAccountStrategyMTokenAta, TAccountTokenProgram>;

      return instruction;
  }


export type ParsedClaimFeesInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      authority: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      strategy: TAccountMetas[2],
                      strategyVaultX: TAccountMetas[3],
                      treasuryX: TAccountMetas[4],
                      mTokenMint: TAccountMetas[5],
                      strategyMTokenAta: TAccountMetas[6],
                      tokenProgram: TAccountMetas[7],
          };
        data: ClaimFeesInstructionData;
  };

export function parseClaimFeesInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedClaimFeesInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 8) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              authority: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        strategy: getNextAccount(),
                                        strategyVaultX: getNextAccount(),
                                        treasuryX: getNextAccount(),
                                        mTokenMint: getNextAccount(),
                                        strategyMTokenAta: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                        },
              data: getClaimFeesInstructionDataDecoder().decode(instruction.data),
      };
}

