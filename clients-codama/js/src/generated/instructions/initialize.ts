/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import { getGlobalConfigArgsDecoder, getGlobalConfigArgsEncoder, type GlobalConfigArgs, type GlobalConfigArgsArgs } from '../types';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237]);

export function getInitializeDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR); }

export type InitializeInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAdmin extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = "11111111111111111111111111111111",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAdmin extends string ? WritableSignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin, TAccountGlobalConfig extends string ? WritableAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, ...TRemainingAccounts]>
  ;



export type InitializeInstructionData = { discriminator: ReadonlyUint8Array; globalConfigArgs: GlobalConfigArgs;  };

export type InitializeInstructionDataArgs = { globalConfigArgs: GlobalConfigArgsArgs;  };




export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['globalConfigArgs', getGlobalConfigArgsEncoder()]]), (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR }));
}



export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['globalConfigArgs', getGlobalConfigArgsDecoder()]]);
}




export function getInitializeInstructionDataCodec(): Codec<InitializeInstructionDataArgs, InitializeInstructionData> {
  return combineCodec(getInitializeInstructionDataEncoder(), getInitializeInstructionDataDecoder());
}




export type InitializeInput<TAccountAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountSystemProgram extends string = string,
  >
=  {
  admin: TransactionSigner<TAccountAdmin>;
globalConfig: Address<TAccountGlobalConfig>;
systemProgram?: Address<TAccountSystemProgram>;globalConfigArgs: InitializeInstructionDataArgs["globalConfigArgs"];
}


export  function getInitializeInstruction<TAccountAdmin extends string, TAccountGlobalConfig extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: InitializeInput<TAccountAdmin, TAccountGlobalConfig, TAccountSystemProgram>, config?: { programAddress?: TProgramAddress } ): InitializeInstruction<TProgramAddress, TAccountAdmin, TAccountGlobalConfig, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              admin: { value: input.admin ?? null, isWritable: true },
              globalConfig: { value: input.globalConfig ?? null, isWritable: true },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.admin),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.systemProgram),
                      ]      ,    programAddress,
          data: getInitializeInstructionDataEncoder().encode(args as InitializeInstructionDataArgs),
      } as InitializeInstruction<TProgramAddress, TAccountAdmin, TAccountGlobalConfig, TAccountSystemProgram>;

      return instruction;
  }


export type ParsedInitializeInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      admin: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      systemProgram: TAccountMetas[2],
          };
        data: InitializeInstructionData;
  };

export function parseInitializeInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedInitializeInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 3) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              admin: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        systemProgram: getNextAccount(),
                        },
              data: getInitializeInstructionDataDecoder().decode(instruction.data),
      };
}

