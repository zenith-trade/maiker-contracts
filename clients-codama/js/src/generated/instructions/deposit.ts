/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DEPOSIT_DISCRIMINATOR = new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182]);

export function getDepositDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(DEPOSIT_DISCRIMINATOR); }

export type DepositInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountUser extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountUserPosition extends string | IAccountMeta<string> = string, TAccountUserTokenX extends string | IAccountMeta<string> = string, TAccountStrategyVaultX extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountSystemProgram extends string | IAccountMeta<string> = "11111111111111111111111111111111",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountUser extends string ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser> : TAccountUser, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountUserPosition extends string ? WritableAccount<TAccountUserPosition> : TAccountUserPosition, TAccountUserTokenX extends string ? WritableAccount<TAccountUserTokenX> : TAccountUserTokenX, TAccountStrategyVaultX extends string ? WritableAccount<TAccountStrategyVaultX> : TAccountStrategyVaultX, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, ...TRemainingAccounts]>
  ;



export type DepositInstructionData = { discriminator: ReadonlyUint8Array; amount: bigint;  };

export type DepositInstructionDataArgs = { amount: number | bigint;  };




export function getDepositInstructionDataEncoder(): Encoder<DepositInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['amount', getU64Encoder()]]), (value) => ({ ...value, discriminator: DEPOSIT_DISCRIMINATOR }));
}



export function getDepositInstructionDataDecoder(): Decoder<DepositInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['amount', getU64Decoder()]]);
}




export function getDepositInstructionDataCodec(): Codec<DepositInstructionDataArgs, DepositInstructionData> {
  return combineCodec(getDepositInstructionDataEncoder(), getDepositInstructionDataDecoder());
}




export type DepositInput<TAccountUser extends string = string,
  TAccountStrategy extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountUserPosition extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountStrategyVaultX extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  >
=  {
  user: TransactionSigner<TAccountUser>;
strategy: Address<TAccountStrategy>;
globalConfig: Address<TAccountGlobalConfig>;
userPosition: Address<TAccountUserPosition>;
userTokenX: Address<TAccountUserTokenX>;
strategyVaultX: Address<TAccountStrategyVaultX>;
tokenProgram?: Address<TAccountTokenProgram>;
systemProgram?: Address<TAccountSystemProgram>;amount: DepositInstructionDataArgs["amount"];
}


export  function getDepositInstruction<TAccountUser extends string, TAccountStrategy extends string, TAccountGlobalConfig extends string, TAccountUserPosition extends string, TAccountUserTokenX extends string, TAccountStrategyVaultX extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: DepositInput<TAccountUser, TAccountStrategy, TAccountGlobalConfig, TAccountUserPosition, TAccountUserTokenX, TAccountStrategyVaultX, TAccountTokenProgram, TAccountSystemProgram>, config?: { programAddress?: TProgramAddress } ): DepositInstruction<TProgramAddress, TAccountUser, TAccountStrategy, TAccountGlobalConfig, TAccountUserPosition, TAccountUserTokenX, TAccountStrategyVaultX, TAccountTokenProgram, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              user: { value: input.user ?? null, isWritable: true },
              strategy: { value: input.strategy ?? null, isWritable: true },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              userPosition: { value: input.userPosition ?? null, isWritable: true },
              userTokenX: { value: input.userTokenX ?? null, isWritable: true },
              strategyVaultX: { value: input.strategyVaultX ?? null, isWritable: true },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.user),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.userPosition),
                  getAccountMeta(accounts.userTokenX),
                  getAccountMeta(accounts.strategyVaultX),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.systemProgram),
                      ]      ,    programAddress,
          data: getDepositInstructionDataEncoder().encode(args as DepositInstructionDataArgs),
      } as DepositInstruction<TProgramAddress, TAccountUser, TAccountStrategy, TAccountGlobalConfig, TAccountUserPosition, TAccountUserTokenX, TAccountStrategyVaultX, TAccountTokenProgram, TAccountSystemProgram>;

      return instruction;
  }


export type ParsedDepositInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      user: TAccountMetas[0],
                      strategy: TAccountMetas[1],
                      globalConfig: TAccountMetas[2],
                      userPosition: TAccountMetas[3],
                      userTokenX: TAccountMetas[4],
                      strategyVaultX: TAccountMetas[5],
                      tokenProgram: TAccountMetas[6],
                      systemProgram: TAccountMetas[7],
          };
        data: DepositInstructionData;
  };

export function parseDepositInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedDepositInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 8) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              user: getNextAccount(),
                                        strategy: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        userPosition: getNextAccount(),
                                        userTokenX: getNextAccount(),
                                        strategyVaultX: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        systemProgram: getNextAccount(),
                        },
              data: getDepositInstructionDataDecoder().decode(instruction.data),
      };
}

