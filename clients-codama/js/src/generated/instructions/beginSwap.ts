/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBooleanDecoder, getBooleanEncoder, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BEGIN_SWAP_DISCRIMINATOR = new Uint8Array([174, 109, 228, 1, 242, 105, 232, 105]);

export function getBeginSwapDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(BEGIN_SWAP_DISCRIMINATOR); }

export type BeginSwapInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAuthority extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountInVault extends string | IAccountMeta<string> = string, TAccountOutVault extends string | IAccountMeta<string> = string, TAccountInAdminAta extends string | IAccountMeta<string> = string, TAccountOutAdminAta extends string | IAccountMeta<string> = string, TAccountInMint extends string | IAccountMeta<string> = string, TAccountOutMint extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountInstructionsSysvar extends string | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAuthority extends string ? WritableSignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountInVault extends string ? WritableAccount<TAccountInVault> : TAccountInVault, TAccountOutVault extends string ? WritableAccount<TAccountOutVault> : TAccountOutVault, TAccountInAdminAta extends string ? WritableAccount<TAccountInAdminAta> : TAccountInAdminAta, TAccountOutAdminAta extends string ? WritableAccount<TAccountOutAdminAta> : TAccountOutAdminAta, TAccountInMint extends string ? ReadonlyAccount<TAccountInMint> : TAccountInMint, TAccountOutMint extends string ? ReadonlyAccount<TAccountOutMint> : TAccountOutMint, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountInstructionsSysvar extends string ? ReadonlyAccount<TAccountInstructionsSysvar> : TAccountInstructionsSysvar, ...TRemainingAccounts]>
  ;



export type BeginSwapInstructionData = { discriminator: ReadonlyUint8Array; xToY: boolean; amountIn: bigint;  };

export type BeginSwapInstructionDataArgs = { xToY: boolean; amountIn: number | bigint;  };




export function getBeginSwapInstructionDataEncoder(): Encoder<BeginSwapInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['xToY', getBooleanEncoder()], ['amountIn', getU64Encoder()]]), (value) => ({ ...value, discriminator: BEGIN_SWAP_DISCRIMINATOR }));
}



export function getBeginSwapInstructionDataDecoder(): Decoder<BeginSwapInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['xToY', getBooleanDecoder()], ['amountIn', getU64Decoder()]]);
}




export function getBeginSwapInstructionDataCodec(): Codec<BeginSwapInstructionDataArgs, BeginSwapInstructionData> {
  return combineCodec(getBeginSwapInstructionDataEncoder(), getBeginSwapInstructionDataDecoder());
}




export type BeginSwapInput<TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountStrategy extends string = string,
  TAccountInVault extends string = string,
  TAccountOutVault extends string = string,
  TAccountInAdminAta extends string = string,
  TAccountOutAdminAta extends string = string,
  TAccountInMint extends string = string,
  TAccountOutMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountInstructionsSysvar extends string = string,
  >
=  {
  authority: TransactionSigner<TAccountAuthority>;
globalConfig: Address<TAccountGlobalConfig>;
strategy: Address<TAccountStrategy>;
inVault: Address<TAccountInVault>;
outVault: Address<TAccountOutVault>;
inAdminAta: Address<TAccountInAdminAta>;
outAdminAta: Address<TAccountOutAdminAta>;
inMint: Address<TAccountInMint>;
outMint: Address<TAccountOutMint>;
tokenProgram?: Address<TAccountTokenProgram>;
instructionsSysvar?: Address<TAccountInstructionsSysvar>;xToY: BeginSwapInstructionDataArgs["xToY"];
amountIn: BeginSwapInstructionDataArgs["amountIn"];
}


export  function getBeginSwapInstruction<TAccountAuthority extends string, TAccountGlobalConfig extends string, TAccountStrategy extends string, TAccountInVault extends string, TAccountOutVault extends string, TAccountInAdminAta extends string, TAccountOutAdminAta extends string, TAccountInMint extends string, TAccountOutMint extends string, TAccountTokenProgram extends string, TAccountInstructionsSysvar extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: BeginSwapInput<TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountInVault, TAccountOutVault, TAccountInAdminAta, TAccountOutAdminAta, TAccountInMint, TAccountOutMint, TAccountTokenProgram, TAccountInstructionsSysvar>, config?: { programAddress?: TProgramAddress } ): BeginSwapInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountInVault, TAccountOutVault, TAccountInAdminAta, TAccountOutAdminAta, TAccountInMint, TAccountOutMint, TAccountTokenProgram, TAccountInstructionsSysvar> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              authority: { value: input.authority ?? null, isWritable: true },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              strategy: { value: input.strategy ?? null, isWritable: true },
              inVault: { value: input.inVault ?? null, isWritable: true },
              outVault: { value: input.outVault ?? null, isWritable: true },
              inAdminAta: { value: input.inAdminAta ?? null, isWritable: true },
              outAdminAta: { value: input.outAdminAta ?? null, isWritable: true },
              inMint: { value: input.inMint ?? null, isWritable: false },
              outMint: { value: input.outMint ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              instructionsSysvar: { value: input.instructionsSysvar ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.instructionsSysvar.value) {
accounts.instructionsSysvar.value = 'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.inVault),
                  getAccountMeta(accounts.outVault),
                  getAccountMeta(accounts.inAdminAta),
                  getAccountMeta(accounts.outAdminAta),
                  getAccountMeta(accounts.inMint),
                  getAccountMeta(accounts.outMint),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.instructionsSysvar),
                      ]      ,    programAddress,
          data: getBeginSwapInstructionDataEncoder().encode(args as BeginSwapInstructionDataArgs),
      } as BeginSwapInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountInVault, TAccountOutVault, TAccountInAdminAta, TAccountOutAdminAta, TAccountInMint, TAccountOutMint, TAccountTokenProgram, TAccountInstructionsSysvar>;

      return instruction;
  }


export type ParsedBeginSwapInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      authority: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      strategy: TAccountMetas[2],
                      inVault: TAccountMetas[3],
                      outVault: TAccountMetas[4],
                      inAdminAta: TAccountMetas[5],
                      outAdminAta: TAccountMetas[6],
                      inMint: TAccountMetas[7],
                      outMint: TAccountMetas[8],
                      tokenProgram: TAccountMetas[9],
                      instructionsSysvar: TAccountMetas[10],
          };
        data: BeginSwapInstructionData;
  };

export function parseBeginSwapInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedBeginSwapInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 11) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              authority: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        strategy: getNextAccount(),
                                        inVault: getNextAccount(),
                                        outVault: getNextAccount(),
                                        inAdminAta: getNextAccount(),
                                        outAdminAta: getNextAccount(),
                                        inMint: getNextAccount(),
                                        outMint: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        instructionsSysvar: getNextAccount(),
                        },
              data: getBeginSwapInstructionDataDecoder().decode(instruction.data),
      };
}

