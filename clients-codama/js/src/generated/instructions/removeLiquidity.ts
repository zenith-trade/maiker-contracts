/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([80, 85, 209, 72, 24, 206, 177, 108]);

export function getRemoveLiquidityDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(REMOVE_LIQUIDITY_DISCRIMINATOR); }

export type RemoveLiquidityInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAuthority extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountUserTokenX extends string | IAccountMeta<string> = string, TAccountUserTokenY extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountLbPair extends string | IAccountMeta<string> = string, TAccountBinArrayBitmapExtension extends string | IAccountMeta<string> = string, TAccountReserveX extends string | IAccountMeta<string> = string, TAccountReserveY extends string | IAccountMeta<string> = string, TAccountTokenXMint extends string | IAccountMeta<string> = string, TAccountTokenYMint extends string | IAccountMeta<string> = string, TAccountBinArrayLower extends string | IAccountMeta<string> = string, TAccountBinArrayUpper extends string | IAccountMeta<string> = string, TAccountLbClmmProgram extends string | IAccountMeta<string> = string, TAccountEventAuthority extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountUserTokenX extends string ? WritableAccount<TAccountUserTokenX> : TAccountUserTokenX, TAccountUserTokenY extends string ? WritableAccount<TAccountUserTokenY> : TAccountUserTokenY, TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition, TAccountLbPair extends string ? WritableAccount<TAccountLbPair> : TAccountLbPair, TAccountBinArrayBitmapExtension extends string ? ReadonlyAccount<TAccountBinArrayBitmapExtension> : TAccountBinArrayBitmapExtension, TAccountReserveX extends string ? WritableAccount<TAccountReserveX> : TAccountReserveX, TAccountReserveY extends string ? WritableAccount<TAccountReserveY> : TAccountReserveY, TAccountTokenXMint extends string ? ReadonlyAccount<TAccountTokenXMint> : TAccountTokenXMint, TAccountTokenYMint extends string ? ReadonlyAccount<TAccountTokenYMint> : TAccountTokenYMint, TAccountBinArrayLower extends string ? WritableAccount<TAccountBinArrayLower> : TAccountBinArrayLower, TAccountBinArrayUpper extends string ? WritableAccount<TAccountBinArrayUpper> : TAccountBinArrayUpper, TAccountLbClmmProgram extends string ? ReadonlyAccount<TAccountLbClmmProgram> : TAccountLbClmmProgram, TAccountEventAuthority extends string ? ReadonlyAccount<TAccountEventAuthority> : TAccountEventAuthority, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, ...TRemainingAccounts]>
  ;



export type RemoveLiquidityInstructionData = { discriminator: ReadonlyUint8Array;  };

export type RemoveLiquidityInstructionDataArgs = {  };




export function getRemoveLiquidityInstructionDataEncoder(): Encoder<RemoveLiquidityInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({ ...value, discriminator: REMOVE_LIQUIDITY_DISCRIMINATOR }));
}



export function getRemoveLiquidityInstructionDataDecoder(): Decoder<RemoveLiquidityInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)]]);
}




export function getRemoveLiquidityInstructionDataCodec(): Codec<RemoveLiquidityInstructionDataArgs, RemoveLiquidityInstructionData> {
  return combineCodec(getRemoveLiquidityInstructionDataEncoder(), getRemoveLiquidityInstructionDataDecoder());
}




export type RemoveLiquidityInput<TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountStrategy extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountUserTokenY extends string = string,
  TAccountPosition extends string = string,
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountBinArrayLower extends string = string,
  TAccountBinArrayUpper extends string = string,
  TAccountLbClmmProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  >
=  {
  authority: TransactionSigner<TAccountAuthority>;
globalConfig: Address<TAccountGlobalConfig>;
strategy: Address<TAccountStrategy>;
userTokenX: Address<TAccountUserTokenX>;
userTokenY: Address<TAccountUserTokenY>;
position: Address<TAccountPosition>;
lbPair: Address<TAccountLbPair>;
binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
reserveX: Address<TAccountReserveX>;
reserveY: Address<TAccountReserveY>;
tokenXMint: Address<TAccountTokenXMint>;
tokenYMint: Address<TAccountTokenYMint>;
binArrayLower: Address<TAccountBinArrayLower>;
binArrayUpper: Address<TAccountBinArrayUpper>;
lbClmmProgram: Address<TAccountLbClmmProgram>;
eventAuthority: Address<TAccountEventAuthority>;
tokenProgram?: Address<TAccountTokenProgram>;
}


export  function getRemoveLiquidityInstruction<TAccountAuthority extends string, TAccountGlobalConfig extends string, TAccountStrategy extends string, TAccountUserTokenX extends string, TAccountUserTokenY extends string, TAccountPosition extends string, TAccountLbPair extends string, TAccountBinArrayBitmapExtension extends string, TAccountReserveX extends string, TAccountReserveY extends string, TAccountTokenXMint extends string, TAccountTokenYMint extends string, TAccountBinArrayLower extends string, TAccountBinArrayUpper extends string, TAccountLbClmmProgram extends string, TAccountEventAuthority extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: RemoveLiquidityInput<TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountUserTokenX, TAccountUserTokenY, TAccountPosition, TAccountLbPair, TAccountBinArrayBitmapExtension, TAccountReserveX, TAccountReserveY, TAccountTokenXMint, TAccountTokenYMint, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenProgram>, config?: { programAddress?: TProgramAddress } ): RemoveLiquidityInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountUserTokenX, TAccountUserTokenY, TAccountPosition, TAccountLbPair, TAccountBinArrayBitmapExtension, TAccountReserveX, TAccountReserveY, TAccountTokenXMint, TAccountTokenYMint, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              authority: { value: input.authority ?? null, isWritable: false },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              strategy: { value: input.strategy ?? null, isWritable: true },
              userTokenX: { value: input.userTokenX ?? null, isWritable: true },
              userTokenY: { value: input.userTokenY ?? null, isWritable: true },
              position: { value: input.position ?? null, isWritable: true },
              lbPair: { value: input.lbPair ?? null, isWritable: true },
              binArrayBitmapExtension: { value: input.binArrayBitmapExtension ?? null, isWritable: false },
              reserveX: { value: input.reserveX ?? null, isWritable: true },
              reserveY: { value: input.reserveY ?? null, isWritable: true },
              tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
              tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
              binArrayLower: { value: input.binArrayLower ?? null, isWritable: true },
              binArrayUpper: { value: input.binArrayUpper ?? null, isWritable: true },
              lbClmmProgram: { value: input.lbClmmProgram ?? null, isWritable: false },
              eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.userTokenX),
                  getAccountMeta(accounts.userTokenY),
                  getAccountMeta(accounts.position),
                  getAccountMeta(accounts.lbPair),
                  getAccountMeta(accounts.binArrayBitmapExtension),
                  getAccountMeta(accounts.reserveX),
                  getAccountMeta(accounts.reserveY),
                  getAccountMeta(accounts.tokenXMint),
                  getAccountMeta(accounts.tokenYMint),
                  getAccountMeta(accounts.binArrayLower),
                  getAccountMeta(accounts.binArrayUpper),
                  getAccountMeta(accounts.lbClmmProgram),
                  getAccountMeta(accounts.eventAuthority),
                  getAccountMeta(accounts.tokenProgram),
                      ]      ,    programAddress,
          data: getRemoveLiquidityInstructionDataEncoder().encode({}),
      } as RemoveLiquidityInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountUserTokenX, TAccountUserTokenY, TAccountPosition, TAccountLbPair, TAccountBinArrayBitmapExtension, TAccountReserveX, TAccountReserveY, TAccountTokenXMint, TAccountTokenYMint, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenProgram>;

      return instruction;
  }


export type ParsedRemoveLiquidityInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      authority: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      strategy: TAccountMetas[2],
                      userTokenX: TAccountMetas[3],
                      userTokenY: TAccountMetas[4],
                      position: TAccountMetas[5],
                      lbPair: TAccountMetas[6],
                      binArrayBitmapExtension?: TAccountMetas[7] | undefined,
                      reserveX: TAccountMetas[8],
                      reserveY: TAccountMetas[9],
                      tokenXMint: TAccountMetas[10],
                      tokenYMint: TAccountMetas[11],
                      binArrayLower: TAccountMetas[12],
                      binArrayUpper: TAccountMetas[13],
                      lbClmmProgram: TAccountMetas[14],
                      eventAuthority: TAccountMetas[15],
                      tokenProgram: TAccountMetas[16],
          };
        data: RemoveLiquidityInstructionData;
  };

export function parseRemoveLiquidityInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedRemoveLiquidityInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 17) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
          const getNextOptionalAccount = () => {
        const accountMeta = getNextAccount();
        return accountMeta.address === MAIKER_CONTRACTS_PROGRAM_ADDRESS ? undefined : accountMeta;
      };
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              authority: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        strategy: getNextAccount(),
                                        userTokenX: getNextAccount(),
                                        userTokenY: getNextAccount(),
                                        position: getNextAccount(),
                                        lbPair: getNextAccount(),
                                        binArrayBitmapExtension: getNextOptionalAccount(),
                                        reserveX: getNextAccount(),
                                        reserveY: getNextAccount(),
                                        tokenXMint: getNextAccount(),
                                        tokenYMint: getNextAccount(),
                                        binArrayLower: getNextAccount(),
                                        binArrayUpper: getNextAccount(),
                                        lbClmmProgram: getNextAccount(),
                                        eventAuthority: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                        },
              data: getRemoveLiquidityInstructionDataDecoder().decode(instruction.data),
      };
}

