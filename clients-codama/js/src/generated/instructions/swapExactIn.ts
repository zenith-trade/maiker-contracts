/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBooleanDecoder, getBooleanEncoder, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SWAP_EXACT_IN_DISCRIMINATOR = new Uint8Array([104, 104, 131, 86, 161, 189, 180, 216]);

export function getSwapExactInDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_EXACT_IN_DISCRIMINATOR); }

export type SwapExactInInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAuthority extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountLbPair extends string | IAccountMeta<string> = string, TAccountBinArrayBitmapExtension extends string | IAccountMeta<string> = string, TAccountReserveX extends string | IAccountMeta<string> = string, TAccountReserveY extends string | IAccountMeta<string> = string, TAccountStrategyVaultX extends string | IAccountMeta<string> = string, TAccountStrategyVaultY extends string | IAccountMeta<string> = string, TAccountTokenXMint extends string | IAccountMeta<string> = string, TAccountTokenYMint extends string | IAccountMeta<string> = string, TAccountOracle extends string | IAccountMeta<string> = string, TAccountHostFeeIn extends string | IAccountMeta<string> = string, TAccountLbClmmProgram extends string | IAccountMeta<string> = string, TAccountEventAuthority extends string | IAccountMeta<string> = string, TAccountTokenXProgram extends string | IAccountMeta<string> = string, TAccountTokenYProgram extends string | IAccountMeta<string> = string,
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAuthority extends string ? WritableSignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountLbPair extends string ? WritableAccount<TAccountLbPair> : TAccountLbPair, TAccountBinArrayBitmapExtension extends string ? ReadonlyAccount<TAccountBinArrayBitmapExtension> : TAccountBinArrayBitmapExtension, TAccountReserveX extends string ? WritableAccount<TAccountReserveX> : TAccountReserveX, TAccountReserveY extends string ? WritableAccount<TAccountReserveY> : TAccountReserveY, TAccountStrategyVaultX extends string ? WritableAccount<TAccountStrategyVaultX> : TAccountStrategyVaultX, TAccountStrategyVaultY extends string ? WritableAccount<TAccountStrategyVaultY> : TAccountStrategyVaultY, TAccountTokenXMint extends string ? ReadonlyAccount<TAccountTokenXMint> : TAccountTokenXMint, TAccountTokenYMint extends string ? ReadonlyAccount<TAccountTokenYMint> : TAccountTokenYMint, TAccountOracle extends string ? WritableAccount<TAccountOracle> : TAccountOracle, TAccountHostFeeIn extends string ? WritableAccount<TAccountHostFeeIn> : TAccountHostFeeIn, TAccountLbClmmProgram extends string ? ReadonlyAccount<TAccountLbClmmProgram> : TAccountLbClmmProgram, TAccountEventAuthority extends string ? ReadonlyAccount<TAccountEventAuthority> : TAccountEventAuthority, TAccountTokenXProgram extends string ? ReadonlyAccount<TAccountTokenXProgram> : TAccountTokenXProgram, TAccountTokenYProgram extends string ? ReadonlyAccount<TAccountTokenYProgram> : TAccountTokenYProgram, ...TRemainingAccounts]>
  ;



export type SwapExactInInstructionData = { discriminator: ReadonlyUint8Array; amountIn: bigint; minAmountOut: bigint; xToY: boolean;  };

export type SwapExactInInstructionDataArgs = { amountIn: number | bigint; minAmountOut: number | bigint; xToY: boolean;  };




export function getSwapExactInInstructionDataEncoder(): Encoder<SwapExactInInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['amountIn', getU64Encoder()], ['minAmountOut', getU64Encoder()], ['xToY', getBooleanEncoder()]]), (value) => ({ ...value, discriminator: SWAP_EXACT_IN_DISCRIMINATOR }));
}



export function getSwapExactInInstructionDataDecoder(): Decoder<SwapExactInInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['amountIn', getU64Decoder()], ['minAmountOut', getU64Decoder()], ['xToY', getBooleanDecoder()]]);
}




export function getSwapExactInInstructionDataCodec(): Codec<SwapExactInInstructionDataArgs, SwapExactInInstructionData> {
  return combineCodec(getSwapExactInInstructionDataEncoder(), getSwapExactInInstructionDataDecoder());
}




export type SwapExactInInput<TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountStrategy extends string = string,
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountStrategyVaultX extends string = string,
  TAccountStrategyVaultY extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountOracle extends string = string,
  TAccountHostFeeIn extends string = string,
  TAccountLbClmmProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountTokenXProgram extends string = string,
  TAccountTokenYProgram extends string = string,
  >
=  {
  /** The authority of the strategy */
authority: TransactionSigner<TAccountAuthority>;
globalConfig: Address<TAccountGlobalConfig>;
strategy: Address<TAccountStrategy>;
lbPair: Address<TAccountLbPair>;
binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
reserveX: Address<TAccountReserveX>;
reserveY: Address<TAccountReserveY>;
/** The strategy vault for token X, which will be used for swapping */
strategyVaultX: Address<TAccountStrategyVaultX>;
/** The strategy vault for token Y, which will be used for swapping */
strategyVaultY: Address<TAccountStrategyVaultY>;
tokenXMint: Address<TAccountTokenXMint>;
tokenYMint: Address<TAccountTokenYMint>;
oracle: Address<TAccountOracle>;
hostFeeIn?: Address<TAccountHostFeeIn>;
/** The lb_clmm program */
lbClmmProgram: Address<TAccountLbClmmProgram>;
eventAuthority: Address<TAccountEventAuthority>;
/** The token program for token X */
tokenXProgram: Address<TAccountTokenXProgram>;
/** The token program for token Y */
tokenYProgram: Address<TAccountTokenYProgram>;amountIn: SwapExactInInstructionDataArgs["amountIn"];
minAmountOut: SwapExactInInstructionDataArgs["minAmountOut"];
xToY: SwapExactInInstructionDataArgs["xToY"];
}


export  function getSwapExactInInstruction<TAccountAuthority extends string, TAccountGlobalConfig extends string, TAccountStrategy extends string, TAccountLbPair extends string, TAccountBinArrayBitmapExtension extends string, TAccountReserveX extends string, TAccountReserveY extends string, TAccountStrategyVaultX extends string, TAccountStrategyVaultY extends string, TAccountTokenXMint extends string, TAccountTokenYMint extends string, TAccountOracle extends string, TAccountHostFeeIn extends string, TAccountLbClmmProgram extends string, TAccountEventAuthority extends string, TAccountTokenXProgram extends string, TAccountTokenYProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: SwapExactInInput<TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountLbPair, TAccountBinArrayBitmapExtension, TAccountReserveX, TAccountReserveY, TAccountStrategyVaultX, TAccountStrategyVaultY, TAccountTokenXMint, TAccountTokenYMint, TAccountOracle, TAccountHostFeeIn, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenXProgram, TAccountTokenYProgram>, config?: { programAddress?: TProgramAddress } ): SwapExactInInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountLbPair, TAccountBinArrayBitmapExtension, TAccountReserveX, TAccountReserveY, TAccountStrategyVaultX, TAccountStrategyVaultY, TAccountTokenXMint, TAccountTokenYMint, TAccountOracle, TAccountHostFeeIn, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenXProgram, TAccountTokenYProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              authority: { value: input.authority ?? null, isWritable: true },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              strategy: { value: input.strategy ?? null, isWritable: true },
              lbPair: { value: input.lbPair ?? null, isWritable: true },
              binArrayBitmapExtension: { value: input.binArrayBitmapExtension ?? null, isWritable: false },
              reserveX: { value: input.reserveX ?? null, isWritable: true },
              reserveY: { value: input.reserveY ?? null, isWritable: true },
              strategyVaultX: { value: input.strategyVaultX ?? null, isWritable: true },
              strategyVaultY: { value: input.strategyVaultY ?? null, isWritable: true },
              tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
              tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
              oracle: { value: input.oracle ?? null, isWritable: true },
              hostFeeIn: { value: input.hostFeeIn ?? null, isWritable: true },
              lbClmmProgram: { value: input.lbClmmProgram ?? null, isWritable: false },
              eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
              tokenXProgram: { value: input.tokenXProgram ?? null, isWritable: false },
              tokenYProgram: { value: input.tokenYProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.lbPair),
                  getAccountMeta(accounts.binArrayBitmapExtension),
                  getAccountMeta(accounts.reserveX),
                  getAccountMeta(accounts.reserveY),
                  getAccountMeta(accounts.strategyVaultX),
                  getAccountMeta(accounts.strategyVaultY),
                  getAccountMeta(accounts.tokenXMint),
                  getAccountMeta(accounts.tokenYMint),
                  getAccountMeta(accounts.oracle),
                  getAccountMeta(accounts.hostFeeIn),
                  getAccountMeta(accounts.lbClmmProgram),
                  getAccountMeta(accounts.eventAuthority),
                  getAccountMeta(accounts.tokenXProgram),
                  getAccountMeta(accounts.tokenYProgram),
                      ]      ,    programAddress,
          data: getSwapExactInInstructionDataEncoder().encode(args as SwapExactInInstructionDataArgs),
      } as SwapExactInInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountLbPair, TAccountBinArrayBitmapExtension, TAccountReserveX, TAccountReserveY, TAccountStrategyVaultX, TAccountStrategyVaultY, TAccountTokenXMint, TAccountTokenYMint, TAccountOracle, TAccountHostFeeIn, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenXProgram, TAccountTokenYProgram>;

      return instruction;
  }


export type ParsedSwapExactInInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                        /** The authority of the strategy */
                authority: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      strategy: TAccountMetas[2],
                      lbPair: TAccountMetas[3],
                      binArrayBitmapExtension?: TAccountMetas[4] | undefined,
                      reserveX: TAccountMetas[5],
                      reserveY: TAccountMetas[6],
                        /** The strategy vault for token X, which will be used for swapping */
                strategyVaultX: TAccountMetas[7],
                        /** The strategy vault for token Y, which will be used for swapping */
                strategyVaultY: TAccountMetas[8],
                      tokenXMint: TAccountMetas[9],
                      tokenYMint: TAccountMetas[10],
                      oracle: TAccountMetas[11],
                      hostFeeIn?: TAccountMetas[12] | undefined,
                        /** The lb_clmm program */
                lbClmmProgram: TAccountMetas[13],
                      eventAuthority: TAccountMetas[14],
                        /** The token program for token X */
                tokenXProgram: TAccountMetas[15],
                        /** The token program for token Y */
                tokenYProgram: TAccountMetas[16],
          };
        data: SwapExactInInstructionData;
  };

export function parseSwapExactInInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedSwapExactInInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 17) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
          const getNextOptionalAccount = () => {
        const accountMeta = getNextAccount();
        return accountMeta.address === MAIKER_CONTRACTS_PROGRAM_ADDRESS ? undefined : accountMeta;
      };
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              authority: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        strategy: getNextAccount(),
                                        lbPair: getNextAccount(),
                                        binArrayBitmapExtension: getNextOptionalAccount(),
                                        reserveX: getNextAccount(),
                                        reserveY: getNextAccount(),
                                        strategyVaultX: getNextAccount(),
                                        strategyVaultY: getNextAccount(),
                                        tokenXMint: getNextAccount(),
                                        tokenYMint: getNextAccount(),
                                        oracle: getNextAccount(),
                                        hostFeeIn: getNextOptionalAccount(),
                                        lbClmmProgram: getNextAccount(),
                                        eventAuthority: getNextAccount(),
                                        tokenXProgram: getNextAccount(),
                                        tokenYProgram: getNextAccount(),
                        },
              data: getSwapExactInInstructionDataDecoder().decode(instruction.data),
      };
}

