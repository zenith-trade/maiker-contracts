/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIATE_WITHDRAWAL_DISCRIMINATOR = new Uint8Array([69, 216, 131, 74, 114, 122, 38, 112]);

export function getInitiateWithdrawalDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(INITIATE_WITHDRAWAL_DISCRIMINATOR); }

export type InitiateWithdrawalInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountUser extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountUserPosition extends string | IAccountMeta<string> = string, TAccountPendingWithdrawal extends string | IAccountMeta<string> = string, TAccountStrategyVaultX extends string | IAccountMeta<string> = string, TAccountMTokenMint extends string | IAccountMeta<string> = string, TAccountStrategyMTokenAta extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = "11111111111111111111111111111111",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountUser extends string ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser> : TAccountUser, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountUserPosition extends string ? WritableAccount<TAccountUserPosition> : TAccountUserPosition, TAccountPendingWithdrawal extends string ? WritableAccount<TAccountPendingWithdrawal> : TAccountPendingWithdrawal, TAccountStrategyVaultX extends string ? WritableAccount<TAccountStrategyVaultX> : TAccountStrategyVaultX, TAccountMTokenMint extends string ? WritableAccount<TAccountMTokenMint> : TAccountMTokenMint, TAccountStrategyMTokenAta extends string ? WritableAccount<TAccountStrategyMTokenAta> : TAccountStrategyMTokenAta, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, ...TRemainingAccounts]>
  ;



export type InitiateWithdrawalInstructionData = { discriminator: ReadonlyUint8Array; sharesAmount: bigint;  };

export type InitiateWithdrawalInstructionDataArgs = { sharesAmount: number | bigint;  };




export function getInitiateWithdrawalInstructionDataEncoder(): Encoder<InitiateWithdrawalInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['sharesAmount', getU64Encoder()]]), (value) => ({ ...value, discriminator: INITIATE_WITHDRAWAL_DISCRIMINATOR }));
}



export function getInitiateWithdrawalInstructionDataDecoder(): Decoder<InitiateWithdrawalInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['sharesAmount', getU64Decoder()]]);
}




export function getInitiateWithdrawalInstructionDataCodec(): Codec<InitiateWithdrawalInstructionDataArgs, InitiateWithdrawalInstructionData> {
  return combineCodec(getInitiateWithdrawalInstructionDataEncoder(), getInitiateWithdrawalInstructionDataDecoder());
}




export type InitiateWithdrawalInput<TAccountUser extends string = string,
  TAccountStrategy extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountUserPosition extends string = string,
  TAccountPendingWithdrawal extends string = string,
  TAccountStrategyVaultX extends string = string,
  TAccountMTokenMint extends string = string,
  TAccountStrategyMTokenAta extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  >
=  {
  user: TransactionSigner<TAccountUser>;
strategy: Address<TAccountStrategy>;
globalConfig: Address<TAccountGlobalConfig>;
userPosition: Address<TAccountUserPosition>;
pendingWithdrawal: Address<TAccountPendingWithdrawal>;
strategyVaultX: Address<TAccountStrategyVaultX>;
mTokenMint: Address<TAccountMTokenMint>;
strategyMTokenAta: Address<TAccountStrategyMTokenAta>;
tokenProgram?: Address<TAccountTokenProgram>;
associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
systemProgram?: Address<TAccountSystemProgram>;sharesAmount: InitiateWithdrawalInstructionDataArgs["sharesAmount"];
}


export  function getInitiateWithdrawalInstruction<TAccountUser extends string, TAccountStrategy extends string, TAccountGlobalConfig extends string, TAccountUserPosition extends string, TAccountPendingWithdrawal extends string, TAccountStrategyVaultX extends string, TAccountMTokenMint extends string, TAccountStrategyMTokenAta extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: InitiateWithdrawalInput<TAccountUser, TAccountStrategy, TAccountGlobalConfig, TAccountUserPosition, TAccountPendingWithdrawal, TAccountStrategyVaultX, TAccountMTokenMint, TAccountStrategyMTokenAta, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>, config?: { programAddress?: TProgramAddress } ): InitiateWithdrawalInstruction<TProgramAddress, TAccountUser, TAccountStrategy, TAccountGlobalConfig, TAccountUserPosition, TAccountPendingWithdrawal, TAccountStrategyVaultX, TAccountMTokenMint, TAccountStrategyMTokenAta, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              user: { value: input.user ?? null, isWritable: true },
              strategy: { value: input.strategy ?? null, isWritable: true },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              userPosition: { value: input.userPosition ?? null, isWritable: true },
              pendingWithdrawal: { value: input.pendingWithdrawal ?? null, isWritable: true },
              strategyVaultX: { value: input.strategyVaultX ?? null, isWritable: true },
              mTokenMint: { value: input.mTokenMint ?? null, isWritable: true },
              strategyMTokenAta: { value: input.strategyMTokenAta ?? null, isWritable: true },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              associatedTokenProgram: { value: input.associatedTokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.user),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.userPosition),
                  getAccountMeta(accounts.pendingWithdrawal),
                  getAccountMeta(accounts.strategyVaultX),
                  getAccountMeta(accounts.mTokenMint),
                  getAccountMeta(accounts.strategyMTokenAta),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.associatedTokenProgram),
                  getAccountMeta(accounts.systemProgram),
                      ]      ,    programAddress,
          data: getInitiateWithdrawalInstructionDataEncoder().encode(args as InitiateWithdrawalInstructionDataArgs),
      } as InitiateWithdrawalInstruction<TProgramAddress, TAccountUser, TAccountStrategy, TAccountGlobalConfig, TAccountUserPosition, TAccountPendingWithdrawal, TAccountStrategyVaultX, TAccountMTokenMint, TAccountStrategyMTokenAta, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>;

      return instruction;
  }


export type ParsedInitiateWithdrawalInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      user: TAccountMetas[0],
                      strategy: TAccountMetas[1],
                      globalConfig: TAccountMetas[2],
                      userPosition: TAccountMetas[3],
                      pendingWithdrawal: TAccountMetas[4],
                      strategyVaultX: TAccountMetas[5],
                      mTokenMint: TAccountMetas[6],
                      strategyMTokenAta: TAccountMetas[7],
                      tokenProgram: TAccountMetas[8],
                      associatedTokenProgram: TAccountMetas[9],
                      systemProgram: TAccountMetas[10],
          };
        data: InitiateWithdrawalInstructionData;
  };

export function parseInitiateWithdrawalInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedInitiateWithdrawalInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 11) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              user: getNextAccount(),
                                        strategy: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        userPosition: getNextAccount(),
                                        pendingWithdrawal: getNextAccount(),
                                        strategyVaultX: getNextAccount(),
                                        mTokenMint: getNextAccount(),
                                        strategyMTokenAta: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        associatedTokenProgram: getNextAccount(),
                                        systemProgram: getNextAccount(),
                        },
              data: getInitiateWithdrawalInstructionDataDecoder().decode(instruction.data),
      };
}

