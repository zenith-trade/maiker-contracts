/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { combineCodec, fixDecoderSize, fixEncoderSize, getArrayDecoder, getArrayEncoder, getBytesDecoder, getBytesEncoder, getI32Decoder, getI32Encoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { MAIKER_CONTRACTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import { getBinLiquidityDistributionByWeightDecoder, getBinLiquidityDistributionByWeightEncoder, type BinLiquidityDistributionByWeight, type BinLiquidityDistributionByWeightArgs } from '../types';

export const ADD_LIQUIDITY_DISCRIMINATOR = new Uint8Array([181, 157, 89, 67, 143, 182, 52, 72]);

export function getAddLiquidityDiscriminatorBytes() { return fixEncoderSize(getBytesEncoder(), 8).encode(ADD_LIQUIDITY_DISCRIMINATOR); }

export type AddLiquidityInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountAuthority extends string | IAccountMeta<string> = string, TAccountGlobalConfig extends string | IAccountMeta<string> = string, TAccountStrategy extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountLbPair extends string | IAccountMeta<string> = string, TAccountTokenXMint extends string | IAccountMeta<string> = string, TAccountTokenYMint extends string | IAccountMeta<string> = string, TAccountStrategyVaultX extends string | IAccountMeta<string> = string, TAccountStrategyVaultY extends string | IAccountMeta<string> = string, TAccountReserveX extends string | IAccountMeta<string> = string, TAccountReserveY extends string | IAccountMeta<string> = string, TAccountBinArrayLower extends string | IAccountMeta<string> = string, TAccountBinArrayUpper extends string | IAccountMeta<string> = string, TAccountBinArrayBitmapExtension extends string | IAccountMeta<string> = string, TAccountLbClmmProgram extends string | IAccountMeta<string> = string, TAccountEventAuthority extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountSystemProgram extends string | IAccountMeta<string> = "11111111111111111111111111111111",
    TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram>
      & IInstructionWithData<Uint8Array>
        & IInstructionWithAccounts<[TAccountAuthority extends string ? WritableSignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountGlobalConfig extends string ? ReadonlyAccount<TAccountGlobalConfig> : TAccountGlobalConfig, TAccountStrategy extends string ? WritableAccount<TAccountStrategy> : TAccountStrategy, TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition, TAccountLbPair extends string ? WritableAccount<TAccountLbPair> : TAccountLbPair, TAccountTokenXMint extends string ? WritableAccount<TAccountTokenXMint> : TAccountTokenXMint, TAccountTokenYMint extends string ? WritableAccount<TAccountTokenYMint> : TAccountTokenYMint, TAccountStrategyVaultX extends string ? WritableAccount<TAccountStrategyVaultX> : TAccountStrategyVaultX, TAccountStrategyVaultY extends string ? WritableAccount<TAccountStrategyVaultY> : TAccountStrategyVaultY, TAccountReserveX extends string ? WritableAccount<TAccountReserveX> : TAccountReserveX, TAccountReserveY extends string ? WritableAccount<TAccountReserveY> : TAccountReserveY, TAccountBinArrayLower extends string ? WritableAccount<TAccountBinArrayLower> : TAccountBinArrayLower, TAccountBinArrayUpper extends string ? WritableAccount<TAccountBinArrayUpper> : TAccountBinArrayUpper, TAccountBinArrayBitmapExtension extends string ? WritableAccount<TAccountBinArrayBitmapExtension> : TAccountBinArrayBitmapExtension, TAccountLbClmmProgram extends string ? ReadonlyAccount<TAccountLbClmmProgram> : TAccountLbClmmProgram, TAccountEventAuthority extends string ? ReadonlyAccount<TAccountEventAuthority> : TAccountEventAuthority, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, ...TRemainingAccounts]>
  ;



export type AddLiquidityInstructionData = { discriminator: ReadonlyUint8Array; 
/** Amount of X token to deposit */
amountX: bigint; 
/** Amount of Y token to deposit */
amountY: bigint; 
/** Active bin that integrator observe off-chain */
activeId: number; 
/** max active bin slippage allowed */
maxActiveBinSlippage: number; 
/** Liquidity distribution to each bins */
binLiquidityDist: Array<BinLiquidityDistributionByWeight>;  };

export type AddLiquidityInstructionDataArgs = { 
/** Amount of X token to deposit */
amountX: number | bigint; 
/** Amount of Y token to deposit */
amountY: number | bigint; 
/** Active bin that integrator observe off-chain */
activeId: number; 
/** max active bin slippage allowed */
maxActiveBinSlippage: number; 
/** Liquidity distribution to each bins */
binLiquidityDist: Array<BinLiquidityDistributionByWeightArgs>;  };




export function getAddLiquidityInstructionDataEncoder(): Encoder<AddLiquidityInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)], ['amountX', getU64Encoder()], ['amountY', getU64Encoder()], ['activeId', getI32Encoder()], ['maxActiveBinSlippage', getI32Encoder()], ['binLiquidityDist', getArrayEncoder(getBinLiquidityDistributionByWeightEncoder())]]), (value) => ({ ...value, discriminator: ADD_LIQUIDITY_DISCRIMINATOR }));
}



export function getAddLiquidityInstructionDataDecoder(): Decoder<AddLiquidityInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)], ['amountX', getU64Decoder()], ['amountY', getU64Decoder()], ['activeId', getI32Decoder()], ['maxActiveBinSlippage', getI32Decoder()], ['binLiquidityDist', getArrayDecoder(getBinLiquidityDistributionByWeightDecoder())]]);
}




export function getAddLiquidityInstructionDataCodec(): Codec<AddLiquidityInstructionDataArgs, AddLiquidityInstructionData> {
  return combineCodec(getAddLiquidityInstructionDataEncoder(), getAddLiquidityInstructionDataDecoder());
}




export type AddLiquidityInput<TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountStrategy extends string = string,
  TAccountPosition extends string = string,
  TAccountLbPair extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountStrategyVaultX extends string = string,
  TAccountStrategyVaultY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountBinArrayLower extends string = string,
  TAccountBinArrayUpper extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountLbClmmProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  >
=  {
  /** The authority of the strategy */
authority: TransactionSigner<TAccountAuthority>;
globalConfig: Address<TAccountGlobalConfig>;
strategy: Address<TAccountStrategy>;
/** CPI accounts below */
position: Address<TAccountPosition>;
lbPair: Address<TAccountLbPair>;
tokenXMint: Address<TAccountTokenXMint>;
tokenYMint: Address<TAccountTokenYMint>;
/** The strategy vault for token X */
strategyVaultX: Address<TAccountStrategyVaultX>;
/** The strategy vault for token Y */
strategyVaultY: Address<TAccountStrategyVaultY>;
reserveX: Address<TAccountReserveX>;
reserveY: Address<TAccountReserveY>;
binArrayLower: Address<TAccountBinArrayLower>;
binArrayUpper: Address<TAccountBinArrayUpper>;
binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
/** The lb_clmm program */
lbClmmProgram: Address<TAccountLbClmmProgram>;
eventAuthority: Address<TAccountEventAuthority>;
/** The token program */
tokenProgram?: Address<TAccountTokenProgram>;
/** The system program */
systemProgram?: Address<TAccountSystemProgram>;amountX: AddLiquidityInstructionDataArgs["amountX"];
amountY: AddLiquidityInstructionDataArgs["amountY"];
activeId: AddLiquidityInstructionDataArgs["activeId"];
maxActiveBinSlippage: AddLiquidityInstructionDataArgs["maxActiveBinSlippage"];
binLiquidityDist: AddLiquidityInstructionDataArgs["binLiquidityDist"];
}


export  function getAddLiquidityInstruction<TAccountAuthority extends string, TAccountGlobalConfig extends string, TAccountStrategy extends string, TAccountPosition extends string, TAccountLbPair extends string, TAccountTokenXMint extends string, TAccountTokenYMint extends string, TAccountStrategyVaultX extends string, TAccountStrategyVaultY extends string, TAccountReserveX extends string, TAccountReserveY extends string, TAccountBinArrayLower extends string, TAccountBinArrayUpper extends string, TAccountBinArrayBitmapExtension extends string, TAccountLbClmmProgram extends string, TAccountEventAuthority extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS>(input: AddLiquidityInput<TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountPosition, TAccountLbPair, TAccountTokenXMint, TAccountTokenYMint, TAccountStrategyVaultX, TAccountStrategyVaultY, TAccountReserveX, TAccountReserveY, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountBinArrayBitmapExtension, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenProgram, TAccountSystemProgram>, config?: { programAddress?: TProgramAddress } ): AddLiquidityInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountPosition, TAccountLbPair, TAccountTokenXMint, TAccountTokenYMint, TAccountStrategyVaultX, TAccountStrategyVaultY, TAccountReserveX, TAccountReserveY, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountBinArrayBitmapExtension, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenProgram, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? MAIKER_CONTRACTS_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              authority: { value: input.authority ?? null, isWritable: true },
              globalConfig: { value: input.globalConfig ?? null, isWritable: false },
              strategy: { value: input.strategy ?? null, isWritable: true },
              position: { value: input.position ?? null, isWritable: true },
              lbPair: { value: input.lbPair ?? null, isWritable: true },
              tokenXMint: { value: input.tokenXMint ?? null, isWritable: true },
              tokenYMint: { value: input.tokenYMint ?? null, isWritable: true },
              strategyVaultX: { value: input.strategyVaultX ?? null, isWritable: true },
              strategyVaultY: { value: input.strategyVaultY ?? null, isWritable: true },
              reserveX: { value: input.reserveX ?? null, isWritable: true },
              reserveY: { value: input.reserveY ?? null, isWritable: true },
              binArrayLower: { value: input.binArrayLower ?? null, isWritable: true },
              binArrayUpper: { value: input.binArrayUpper ?? null, isWritable: true },
              binArrayBitmapExtension: { value: input.binArrayBitmapExtension ?? null, isWritable: true },
              lbClmmProgram: { value: input.lbClmmProgram ?? null, isWritable: false },
              eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.globalConfig),
                  getAccountMeta(accounts.strategy),
                  getAccountMeta(accounts.position),
                  getAccountMeta(accounts.lbPair),
                  getAccountMeta(accounts.tokenXMint),
                  getAccountMeta(accounts.tokenYMint),
                  getAccountMeta(accounts.strategyVaultX),
                  getAccountMeta(accounts.strategyVaultY),
                  getAccountMeta(accounts.reserveX),
                  getAccountMeta(accounts.reserveY),
                  getAccountMeta(accounts.binArrayLower),
                  getAccountMeta(accounts.binArrayUpper),
                  getAccountMeta(accounts.binArrayBitmapExtension),
                  getAccountMeta(accounts.lbClmmProgram),
                  getAccountMeta(accounts.eventAuthority),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.systemProgram),
                      ]      ,    programAddress,
          data: getAddLiquidityInstructionDataEncoder().encode(args as AddLiquidityInstructionDataArgs),
      } as AddLiquidityInstruction<TProgramAddress, TAccountAuthority, TAccountGlobalConfig, TAccountStrategy, TAccountPosition, TAccountLbPair, TAccountTokenXMint, TAccountTokenYMint, TAccountStrategyVaultX, TAccountStrategyVaultY, TAccountReserveX, TAccountReserveY, TAccountBinArrayLower, TAccountBinArrayUpper, TAccountBinArrayBitmapExtension, TAccountLbClmmProgram, TAccountEventAuthority, TAccountTokenProgram, TAccountSystemProgram>;

      return instruction;
  }


export type ParsedAddLiquidityInstruction<
  TProgram extends string = typeof MAIKER_CONTRACTS_PROGRAM_ADDRESS,
      TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                        /** The authority of the strategy */
                authority: TAccountMetas[0],
                      globalConfig: TAccountMetas[1],
                      strategy: TAccountMetas[2],
                        /** CPI accounts below */
                position: TAccountMetas[3],
                      lbPair: TAccountMetas[4],
                      tokenXMint: TAccountMetas[5],
                      tokenYMint: TAccountMetas[6],
                        /** The strategy vault for token X */
                strategyVaultX: TAccountMetas[7],
                        /** The strategy vault for token Y */
                strategyVaultY: TAccountMetas[8],
                      reserveX: TAccountMetas[9],
                      reserveY: TAccountMetas[10],
                      binArrayLower: TAccountMetas[11],
                      binArrayUpper: TAccountMetas[12],
                      binArrayBitmapExtension?: TAccountMetas[13] | undefined,
                        /** The lb_clmm program */
                lbClmmProgram: TAccountMetas[14],
                      eventAuthority: TAccountMetas[15],
                        /** The token program */
                tokenProgram: TAccountMetas[16],
                        /** The system program */
                systemProgram: TAccountMetas[17],
          };
        data: AddLiquidityInstructionData;
  };

export function parseAddLiquidityInstruction<
  TProgram extends string,
      TAccountMetas extends readonly IAccountMeta[],
  >(
  instruction: IInstruction<TProgram>
          & IInstructionWithAccounts<TAccountMetas>
              & IInstructionWithData<Uint8Array>
    ): ParsedAddLiquidityInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 18) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
          const getNextOptionalAccount = () => {
        const accountMeta = getNextAccount();
        return accountMeta.address === MAIKER_CONTRACTS_PROGRAM_ADDRESS ? undefined : accountMeta;
      };
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              authority: getNextAccount(),
                                        globalConfig: getNextAccount(),
                                        strategy: getNextAccount(),
                                        position: getNextAccount(),
                                        lbPair: getNextAccount(),
                                        tokenXMint: getNextAccount(),
                                        tokenYMint: getNextAccount(),
                                        strategyVaultX: getNextAccount(),
                                        strategyVaultY: getNextAccount(),
                                        reserveX: getNextAccount(),
                                        reserveY: getNextAccount(),
                                        binArrayLower: getNextAccount(),
                                        binArrayUpper: getNextAccount(),
                                        binArrayBitmapExtension: getNextOptionalAccount(),
                                        lbClmmProgram: getNextAccount(),
                                        eventAuthority: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        systemProgram: getNextAccount(),
                        },
              data: getAddLiquidityInstructionDataDecoder().decode(instruction.data),
      };
}

