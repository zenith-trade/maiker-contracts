//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct ClosePosition {
    pub authority: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,

    pub position: solana_program::pubkey::Pubkey,

    pub lb_pair: solana_program::pubkey::Pubkey,

    pub bin_array_lower: solana_program::pubkey::Pubkey,

    pub bin_array_upper: solana_program::pubkey::Pubkey,

    pub rent_receiver: solana_program::pubkey::Pubkey,
    /// The lb_clmm program
    pub lb_clmm_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,
}

impl ClosePosition {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lb_pair,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bin_array_lower,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bin_array_upper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_receiver,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lb_clmm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ClosePositionInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MAIKER_CONTRACTS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClosePositionInstructionData {
    discriminator: [u8; 8],
}

impl ClosePositionInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [123, 134, 81, 0, 49, 68, 98, 98],
        }
    }
}

impl Default for ClosePositionInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `ClosePosition`.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[]` global_config
///   2. `[writable]` strategy
///   3. `[writable]` position
///   4. `[writable]` lb_pair
///   5. `[writable]` bin_array_lower
///   6. `[writable]` bin_array_upper
///   7. `[writable]` rent_receiver
///   8. `[]` lb_clmm_program
///   9. `[]` event_authority
#[derive(Clone, Debug, Default)]
pub struct ClosePositionBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    position: Option<solana_program::pubkey::Pubkey>,
    lb_pair: Option<solana_program::pubkey::Pubkey>,
    bin_array_lower: Option<solana_program::pubkey::Pubkey>,
    bin_array_upper: Option<solana_program::pubkey::Pubkey>,
    rent_receiver: Option<solana_program::pubkey::Pubkey>,
    lb_clmm_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClosePositionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn position(&mut self, position: solana_program::pubkey::Pubkey) -> &mut Self {
        self.position = Some(position);
        self
    }
    #[inline(always)]
    pub fn lb_pair(&mut self, lb_pair: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lb_pair = Some(lb_pair);
        self
    }
    #[inline(always)]
    pub fn bin_array_lower(
        &mut self,
        bin_array_lower: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bin_array_lower = Some(bin_array_lower);
        self
    }
    #[inline(always)]
    pub fn bin_array_upper(
        &mut self,
        bin_array_upper: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bin_array_upper = Some(bin_array_upper);
        self
    }
    #[inline(always)]
    pub fn rent_receiver(&mut self, rent_receiver: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_receiver = Some(rent_receiver);
        self
    }
    /// The lb_clmm program
    #[inline(always)]
    pub fn lb_clmm_program(
        &mut self,
        lb_clmm_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.lb_clmm_program = Some(lb_clmm_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ClosePosition {
            authority: self.authority.expect("authority is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            position: self.position.expect("position is not set"),
            lb_pair: self.lb_pair.expect("lb_pair is not set"),
            bin_array_lower: self.bin_array_lower.expect("bin_array_lower is not set"),
            bin_array_upper: self.bin_array_upper.expect("bin_array_upper is not set"),
            rent_receiver: self.rent_receiver.expect("rent_receiver is not set"),
            lb_clmm_program: self.lb_clmm_program.expect("lb_clmm_program is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `close_position` CPI accounts.
pub struct ClosePositionCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub position: &'b solana_program::account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub bin_array_lower: &'b solana_program::account_info::AccountInfo<'a>,

    pub bin_array_upper: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    /// The lb_clmm program
    pub lb_clmm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `close_position` CPI instruction.
pub struct ClosePositionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub position: &'b solana_program::account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub bin_array_lower: &'b solana_program::account_info::AccountInfo<'a>,

    pub bin_array_upper: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    /// The lb_clmm program
    pub lb_clmm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> ClosePositionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ClosePositionCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            global_config: accounts.global_config,
            strategy: accounts.strategy,
            position: accounts.position,
            lb_pair: accounts.lb_pair,
            bin_array_lower: accounts.bin_array_lower,
            bin_array_upper: accounts.bin_array_upper,
            rent_receiver: accounts.rent_receiver,
            lb_clmm_program: accounts.lb_clmm_program,
            event_authority: accounts.event_authority,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lb_pair.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bin_array_lower.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bin_array_upper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_receiver.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lb_clmm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ClosePositionInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MAIKER_CONTRACTS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.position.clone());
        account_infos.push(self.lb_pair.clone());
        account_infos.push(self.bin_array_lower.clone());
        account_infos.push(self.bin_array_upper.clone());
        account_infos.push(self.rent_receiver.clone());
        account_infos.push(self.lb_clmm_program.clone());
        account_infos.push(self.event_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClosePosition` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[]` global_config
///   2. `[writable]` strategy
///   3. `[writable]` position
///   4. `[writable]` lb_pair
///   5. `[writable]` bin_array_lower
///   6. `[writable]` bin_array_upper
///   7. `[writable]` rent_receiver
///   8. `[]` lb_clmm_program
///   9. `[]` event_authority
#[derive(Clone, Debug)]
pub struct ClosePositionCpiBuilder<'a, 'b> {
    instruction: Box<ClosePositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClosePositionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClosePositionCpiBuilderInstruction {
            __program: program,
            authority: None,
            global_config: None,
            strategy: None,
            position: None,
            lb_pair: None,
            bin_array_lower: None,
            bin_array_upper: None,
            rent_receiver: None,
            lb_clmm_program: None,
            event_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn position(
        &mut self,
        position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position = Some(position);
        self
    }
    #[inline(always)]
    pub fn lb_pair(
        &mut self,
        lb_pair: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lb_pair = Some(lb_pair);
        self
    }
    #[inline(always)]
    pub fn bin_array_lower(
        &mut self,
        bin_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bin_array_lower = Some(bin_array_lower);
        self
    }
    #[inline(always)]
    pub fn bin_array_upper(
        &mut self,
        bin_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bin_array_upper = Some(bin_array_upper);
        self
    }
    #[inline(always)]
    pub fn rent_receiver(
        &mut self,
        rent_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_receiver = Some(rent_receiver);
        self
    }
    /// The lb_clmm program
    #[inline(always)]
    pub fn lb_clmm_program(
        &mut self,
        lb_clmm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lb_clmm_program = Some(lb_clmm_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = ClosePositionCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            position: self.instruction.position.expect("position is not set"),

            lb_pair: self.instruction.lb_pair.expect("lb_pair is not set"),

            bin_array_lower: self
                .instruction
                .bin_array_lower
                .expect("bin_array_lower is not set"),

            bin_array_upper: self
                .instruction
                .bin_array_upper
                .expect("bin_array_upper is not set"),

            rent_receiver: self
                .instruction
                .rent_receiver
                .expect("rent_receiver is not set"),

            lb_clmm_program: self
                .instruction
                .lb_clmm_program
                .expect("lb_clmm_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ClosePositionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lb_pair: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bin_array_lower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bin_array_upper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_receiver: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lb_clmm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
