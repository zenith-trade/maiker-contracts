//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct EndSwap {
    pub authority: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,

    pub in_vault: solana_program::pubkey::Pubkey,

    pub out_vault: solana_program::pubkey::Pubkey,

    pub in_admin_ata: solana_program::pubkey::Pubkey,

    pub out_admin_ata: solana_program::pubkey::Pubkey,

    pub in_mint: solana_program::pubkey::Pubkey,

    pub out_mint: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub instructions_sysvar: solana_program::pubkey::Pubkey,
}

impl EndSwap {
    pub fn instruction(
        &self,
        args: EndSwapInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: EndSwapInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.in_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.out_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.in_admin_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.out_admin_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.in_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.out_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.instructions_sysvar,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&EndSwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MAIKER_CONTRACTS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct EndSwapInstructionData {
    discriminator: [u8; 8],
}

impl EndSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [177, 184, 27, 193, 34, 13, 210, 145],
        }
    }
}

impl Default for EndSwapInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct EndSwapInstructionArgs {
    pub x_to_y: bool,
}

/// Instruction builder for `EndSwap`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[]` global_config
///   2. `[writable]` strategy
///   3. `[writable]` in_vault
///   4. `[writable]` out_vault
///   5. `[writable]` in_admin_ata
///   6. `[writable]` out_admin_ata
///   7. `[]` in_mint
///   8. `[]` out_mint
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   10. `[optional]` instructions_sysvar (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct EndSwapBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    in_vault: Option<solana_program::pubkey::Pubkey>,
    out_vault: Option<solana_program::pubkey::Pubkey>,
    in_admin_ata: Option<solana_program::pubkey::Pubkey>,
    out_admin_ata: Option<solana_program::pubkey::Pubkey>,
    in_mint: Option<solana_program::pubkey::Pubkey>,
    out_mint: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    instructions_sysvar: Option<solana_program::pubkey::Pubkey>,
    x_to_y: Option<bool>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl EndSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn in_vault(&mut self, in_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.in_vault = Some(in_vault);
        self
    }
    #[inline(always)]
    pub fn out_vault(&mut self, out_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.out_vault = Some(out_vault);
        self
    }
    #[inline(always)]
    pub fn in_admin_ata(&mut self, in_admin_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.in_admin_ata = Some(in_admin_ata);
        self
    }
    #[inline(always)]
    pub fn out_admin_ata(&mut self, out_admin_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.out_admin_ata = Some(out_admin_ata);
        self
    }
    #[inline(always)]
    pub fn in_mint(&mut self, in_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.in_mint = Some(in_mint);
        self
    }
    #[inline(always)]
    pub fn out_mint(&mut self, out_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.out_mint = Some(out_mint);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    #[inline(always)]
    pub fn instructions_sysvar(
        &mut self,
        instructions_sysvar: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.instructions_sysvar = Some(instructions_sysvar);
        self
    }
    #[inline(always)]
    pub fn x_to_y(&mut self, x_to_y: bool) -> &mut Self {
        self.x_to_y = Some(x_to_y);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = EndSwap {
            authority: self.authority.expect("authority is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            in_vault: self.in_vault.expect("in_vault is not set"),
            out_vault: self.out_vault.expect("out_vault is not set"),
            in_admin_ata: self.in_admin_ata.expect("in_admin_ata is not set"),
            out_admin_ata: self.out_admin_ata.expect("out_admin_ata is not set"),
            in_mint: self.in_mint.expect("in_mint is not set"),
            out_mint: self.out_mint.expect("out_mint is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            instructions_sysvar: self.instructions_sysvar.unwrap_or(solana_program::pubkey!(
                "Sysvar1nstructions1111111111111111111111111"
            )),
        };
        let args = EndSwapInstructionArgs {
            x_to_y: self.x_to_y.clone().expect("x_to_y is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `end_swap` CPI accounts.
pub struct EndSwapCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub in_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub out_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub in_admin_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub out_admin_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub in_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub out_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub instructions_sysvar: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `end_swap` CPI instruction.
pub struct EndSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub in_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub out_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub in_admin_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub out_admin_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub in_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub out_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub instructions_sysvar: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: EndSwapInstructionArgs,
}

impl<'a, 'b> EndSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: EndSwapCpiAccounts<'a, 'b>,
        args: EndSwapInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            global_config: accounts.global_config,
            strategy: accounts.strategy,
            in_vault: accounts.in_vault,
            out_vault: accounts.out_vault,
            in_admin_ata: accounts.in_admin_ata,
            out_admin_ata: accounts.out_admin_ata,
            in_mint: accounts.in_mint,
            out_mint: accounts.out_mint,
            token_program: accounts.token_program,
            instructions_sysvar: accounts.instructions_sysvar,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.in_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.out_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.in_admin_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.out_admin_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.in_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.out_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.instructions_sysvar.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&EndSwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MAIKER_CONTRACTS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.in_vault.clone());
        account_infos.push(self.out_vault.clone());
        account_infos.push(self.in_admin_ata.clone());
        account_infos.push(self.out_admin_ata.clone());
        account_infos.push(self.in_mint.clone());
        account_infos.push(self.out_mint.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.instructions_sysvar.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `EndSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[]` global_config
///   2. `[writable]` strategy
///   3. `[writable]` in_vault
///   4. `[writable]` out_vault
///   5. `[writable]` in_admin_ata
///   6. `[writable]` out_admin_ata
///   7. `[]` in_mint
///   8. `[]` out_mint
///   9. `[]` token_program
///   10. `[]` instructions_sysvar
#[derive(Clone, Debug)]
pub struct EndSwapCpiBuilder<'a, 'b> {
    instruction: Box<EndSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> EndSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(EndSwapCpiBuilderInstruction {
            __program: program,
            authority: None,
            global_config: None,
            strategy: None,
            in_vault: None,
            out_vault: None,
            in_admin_ata: None,
            out_admin_ata: None,
            in_mint: None,
            out_mint: None,
            token_program: None,
            instructions_sysvar: None,
            x_to_y: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn in_vault(
        &mut self,
        in_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.in_vault = Some(in_vault);
        self
    }
    #[inline(always)]
    pub fn out_vault(
        &mut self,
        out_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.out_vault = Some(out_vault);
        self
    }
    #[inline(always)]
    pub fn in_admin_ata(
        &mut self,
        in_admin_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.in_admin_ata = Some(in_admin_ata);
        self
    }
    #[inline(always)]
    pub fn out_admin_ata(
        &mut self,
        out_admin_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.out_admin_ata = Some(out_admin_ata);
        self
    }
    #[inline(always)]
    pub fn in_mint(
        &mut self,
        in_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.in_mint = Some(in_mint);
        self
    }
    #[inline(always)]
    pub fn out_mint(
        &mut self,
        out_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.out_mint = Some(out_mint);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn instructions_sysvar(
        &mut self,
        instructions_sysvar: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.instructions_sysvar = Some(instructions_sysvar);
        self
    }
    #[inline(always)]
    pub fn x_to_y(&mut self, x_to_y: bool) -> &mut Self {
        self.instruction.x_to_y = Some(x_to_y);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = EndSwapInstructionArgs {
            x_to_y: self.instruction.x_to_y.clone().expect("x_to_y is not set"),
        };
        let instruction = EndSwapCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            in_vault: self.instruction.in_vault.expect("in_vault is not set"),

            out_vault: self.instruction.out_vault.expect("out_vault is not set"),

            in_admin_ata: self
                .instruction
                .in_admin_ata
                .expect("in_admin_ata is not set"),

            out_admin_ata: self
                .instruction
                .out_admin_ata
                .expect("out_admin_ata is not set"),

            in_mint: self.instruction.in_mint.expect("in_mint is not set"),

            out_mint: self.instruction.out_mint.expect("out_mint is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            instructions_sysvar: self
                .instruction
                .instructions_sysvar
                .expect("instructions_sysvar is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct EndSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    in_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    out_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    in_admin_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    out_admin_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    in_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    out_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    instructions_sysvar: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    x_to_y: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
