//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct InitiateWithdrawal {
    pub user: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub user_position: solana_program::pubkey::Pubkey,

    pub pending_withdrawal: solana_program::pubkey::Pubkey,

    pub strategy_vault_x: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl InitiateWithdrawal {
    pub fn instruction(
        &self,
        args: InitiateWithdrawalInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitiateWithdrawalInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pending_withdrawal,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy_vault_x,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitiateWithdrawalInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MAIKER_CONTRACTS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitiateWithdrawalInstructionData {
    discriminator: [u8; 8],
}

impl InitiateWithdrawalInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [69, 216, 131, 74, 114, 122, 38, 112],
        }
    }
}

impl Default for InitiateWithdrawalInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitiateWithdrawalInstructionArgs {
    pub shares_amount: u64,
}

/// Instruction builder for `InitiateWithdrawal`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` user
///   1. `[writable]` strategy
///   2. `[]` global_config
///   3. `[writable]` user_position
///   4. `[writable]` pending_withdrawal
///   5. `[writable]` strategy_vault_x
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitiateWithdrawalBuilder {
    user: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    user_position: Option<solana_program::pubkey::Pubkey>,
    pending_withdrawal: Option<solana_program::pubkey::Pubkey>,
    strategy_vault_x: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    shares_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitiateWithdrawalBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn user_position(&mut self, user_position: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_position = Some(user_position);
        self
    }
    #[inline(always)]
    pub fn pending_withdrawal(
        &mut self,
        pending_withdrawal: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pending_withdrawal = Some(pending_withdrawal);
        self
    }
    #[inline(always)]
    pub fn strategy_vault_x(
        &mut self,
        strategy_vault_x: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.strategy_vault_x = Some(strategy_vault_x);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn shares_amount(&mut self, shares_amount: u64) -> &mut Self {
        self.shares_amount = Some(shares_amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitiateWithdrawal {
            user: self.user.expect("user is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            user_position: self.user_position.expect("user_position is not set"),
            pending_withdrawal: self
                .pending_withdrawal
                .expect("pending_withdrawal is not set"),
            strategy_vault_x: self.strategy_vault_x.expect("strategy_vault_x is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitiateWithdrawalInstructionArgs {
            shares_amount: self
                .shares_amount
                .clone()
                .expect("shares_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initiate_withdrawal` CPI accounts.
pub struct InitiateWithdrawalCpiAccounts<'a, 'b> {
    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub pending_withdrawal: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy_vault_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initiate_withdrawal` CPI instruction.
pub struct InitiateWithdrawalCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub pending_withdrawal: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy_vault_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitiateWithdrawalInstructionArgs,
}

impl<'a, 'b> InitiateWithdrawalCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitiateWithdrawalCpiAccounts<'a, 'b>,
        args: InitiateWithdrawalInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            user: accounts.user,
            strategy: accounts.strategy,
            global_config: accounts.global_config,
            user_position: accounts.user_position,
            pending_withdrawal: accounts.pending_withdrawal,
            strategy_vault_x: accounts.strategy_vault_x,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pending_withdrawal.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy_vault_x.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitiateWithdrawalInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MAIKER_CONTRACTS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.user_position.clone());
        account_infos.push(self.pending_withdrawal.clone());
        account_infos.push(self.strategy_vault_x.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitiateWithdrawal` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` user
///   1. `[writable]` strategy
///   2. `[]` global_config
///   3. `[writable]` user_position
///   4. `[writable]` pending_withdrawal
///   5. `[writable]` strategy_vault_x
///   6. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitiateWithdrawalCpiBuilder<'a, 'b> {
    instruction: Box<InitiateWithdrawalCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitiateWithdrawalCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitiateWithdrawalCpiBuilderInstruction {
            __program: program,
            user: None,
            strategy: None,
            global_config: None,
            user_position: None,
            pending_withdrawal: None,
            strategy_vault_x: None,
            system_program: None,
            shares_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn user_position(
        &mut self,
        user_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_position = Some(user_position);
        self
    }
    #[inline(always)]
    pub fn pending_withdrawal(
        &mut self,
        pending_withdrawal: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pending_withdrawal = Some(pending_withdrawal);
        self
    }
    #[inline(always)]
    pub fn strategy_vault_x(
        &mut self,
        strategy_vault_x: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy_vault_x = Some(strategy_vault_x);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn shares_amount(&mut self, shares_amount: u64) -> &mut Self {
        self.instruction.shares_amount = Some(shares_amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitiateWithdrawalInstructionArgs {
            shares_amount: self
                .instruction
                .shares_amount
                .clone()
                .expect("shares_amount is not set"),
        };
        let instruction = InitiateWithdrawalCpi {
            __program: self.instruction.__program,

            user: self.instruction.user.expect("user is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            user_position: self
                .instruction
                .user_position
                .expect("user_position is not set"),

            pending_withdrawal: self
                .instruction
                .pending_withdrawal
                .expect("pending_withdrawal is not set"),

            strategy_vault_x: self
                .instruction
                .strategy_vault_x
                .expect("strategy_vault_x is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitiateWithdrawalCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pending_withdrawal: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy_vault_x: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    shares_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
